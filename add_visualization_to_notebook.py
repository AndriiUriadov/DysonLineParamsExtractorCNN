import json

# –ß–∏—Ç–∞—î–º–æ notebook
with open('DysonianLineCNN.ipynb', 'r') as f:
    notebook = json.load(f)

# –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É —Å–µ–∫—Ü—ñ—é –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—ñ—Å–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
new_cells = [
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": ["## 8. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ"]
    },
    {
        "cell_type": "code",
        "metadata": {},
        "source": [
            "# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó\n",
            "from model_visualizer import (\n",
            "    visualize_model_architecture, visualize_attention_weights,\n",
            "    visualize_feature_maps, create_interactive_model_summary,\n",
            "    visualize_training_progress, save_model_visualization\n",
            ")\n",
            "\n",
            "# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó\n",
            "test_input = torch.randn(1, 4096).to(device)\n",
            "\n",
            "print('üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π –º–æ–¥–µ–ª—ñ...')\n"
        ]
    },
    {
        "cell_type": "code",
        "metadata": {},
        "source": [
            "# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª—ñ\n",
            "visualize_model_architecture(model, 'model_architecture.png')\n"
        ]
    },
    {
        "cell_type": "code",
        "metadata": {},
        "source": [
            "# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ attention –≤–∞–≥–∏\n",
            "visualize_attention_weights(model, test_input, 'attention_weights.png')\n"
        ]
    },
    {
        "cell_type": "code",
        "metadata": {},
        "source": [
            "# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ feature maps\n",
            "visualize_feature_maps(model, test_input, 'feature_maps.png')\n"
        ]
    },
    {
        "cell_type": "code",
        "metadata": {},
        "source": [
            "# –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤\n",
            "create_interactive_model_summary(model)\n"
        ]
    },
    {
        "cell_type": "code",
        "metadata": {},
        "source": [
            "# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞–≤—á–∞–Ω–Ω—è (—è–∫—â–æ —î —ñ—Å—Ç–æ—Ä—ñ—è)\n",
            "if 'history' in locals():\n",
            "    visualize_training_progress(history)\n",
            "else:\n",
            "    print('‚ö†Ô∏è  –Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å.')\n"
        ]
    },
    {
        "cell_type": "code",
        "metadata": {},
        "source": [
            "# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó\n",
            "save_model_visualization(model, test_input, 'model_visualizations')\n",
            "print('‚úÖ –í—Å—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!')\n"
        ]
    }
]

# –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–º—ñ—Ä–∫–∏ –¥–æ notebook
notebook['cells'].extend(new_cells)

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ notebook
with open('DysonianLineCNN.ipynb', 'w') as f:
    json.dump(notebook, f, indent=1)

print("‚úÖ –°–µ–∫—Ü—ñ—é –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞–Ω–æ –¥–æ notebook!") 