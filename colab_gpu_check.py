# =============================================================================
# –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–°–¢–ï–ú–ù–ò–• –†–ï–°–£–†–°–Ü–í –°–ï–†–ï–î–û–í–ò–©–ê –í–ò–ö–û–ù–ê–ù–ù–Ø
# =============================================================================

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—ñ
import subprocess
import sys
import platform
import warnings

# –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ psutil, —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –≤—Å—Ç–∞–Ω–æ–≤–∏–º–æ
try:
    from psutil import virtual_memory
except ImportError:
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ psutil...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "psutil"])
    from psutil import virtual_memory

def check_gpu_availability():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å GPU —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ GPU
    """
    gpu_info = {
        'available': False,
        'name': 'Unknown',
        'memory_total': 0,
        'memory_free': 0,
        'memory_used': 0,
        'driver_version': 'Unknown',
        'cuda_version': 'Unknown',
        'temperature': 0,
        'utilization': 0,
        'error_message': None
    }
    
    try:
        # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É nvidia-smi –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ GPU
        result = subprocess.run(['nvidia-smi'], 
                              capture_output=True, 
                              text=True, 
                              timeout=15)
        
        if result.returncode == 0:
            output = result.stdout
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫ —É –≤–∏–≤–æ–¥—ñ
            error_indicators = ['failed', 'error', 'not found', 'no devices', 'nvidia-smi has failed']
            has_error = any(indicator in output.lower() for indicator in error_indicators)
            
            if not has_error and 'nvidia' in output.lower():
                gpu_info['available'] = True
                
                # –ü–∞—Ä—Å–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ GPU
                lines = output.split('\n')
                for line in lines:
                    line_lower = line.lower()
                    
                    # –î—Ä–∞–π–≤–µ—Ä –≤–µ—Ä—Å—ñ—è
                    if 'driver version' in line_lower:
                        gpu_info['driver_version'] = line.split(':')[-1].strip()
                    
                    # CUDA –≤–µ—Ä—Å—ñ—è
                    elif 'cuda version' in line_lower:
                        gpu_info['cuda_version'] = line.split(':')[-1].strip()
                    
                    # –ù–∞–∑–≤–∞ GPU
                    elif 'nvidia' in line_lower and any(gpu in line_lower for gpu in ['a100', 'v100', 't4', 'k80', 'p100']):
                        gpu_info['name'] = line.strip()
                    
                    # –ü–∞–º'—è—Ç—å GPU
                    elif 'memory' in line_lower and 'mi' in line_lower:
                        try:
                            memory_parts = line.split('|')
                            if len(memory_parts) >= 3:
                                memory_info = memory_parts[2].strip()
                                if 'MiB' in memory_info:
                                    # –§–æ—Ä–º–∞—Ç: "0MiB / 40960MiB"
                                    memory_values = memory_info.split('/')
                                    if len(memory_values) >= 2:
                                        used_mem = memory_values[0].replace('MiB', '').strip()
                                        total_mem = memory_values[1].replace('MiB', '').strip()
                                        gpu_info['memory_used'] = int(used_mem)
                                        gpu_info['memory_total'] = int(total_mem)
                                        gpu_info['memory_free'] = gpu_info['memory_total'] - gpu_info['memory_used']
                        except (ValueError, IndexError):
                            pass
                    
                    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                    elif 'temp' in line_lower and '¬∞c' in line_lower:
                        try:
                            temp_part = line.split('¬∞C')[0].split()[-1]
                            gpu_info['temperature'] = int(temp_part)
                        except (ValueError, IndexError):
                            pass
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è GPU
                    elif 'gpu-util' in line_lower:
                        try:
                            util_part = line.split('%')[0].split()[-1]
                            gpu_info['utilization'] = int(util_part)
                        except (ValueError, IndexError):
                            pass
            else:
                gpu_info['error_message'] = 'GPU –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
        else:
            gpu_info['error_message'] = f'–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è nvidia-smi: {result.stderr}'
            
    except subprocess.TimeoutExpired:
        gpu_info['error_message'] = '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ nvidia-smi'
    except FileNotFoundError:
        gpu_info['error_message'] = 'nvidia-smi –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–¥—Ä–∞–π–≤–µ—Ä–∏ NVIDIA –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ)'
    except Exception as e:
        gpu_info['error_message'] = f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'
    
    return gpu_info

def check_ram_availability():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å RAM —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ RAM
    """
    ram_info = {
        'total_gb': 0,
        'available_gb': 0,
        'used_gb': 0,
        'usage_percent': 0,
        'is_high_ram': False,
        'recommendation': ''
    }
    
    try:
        memory = virtual_memory()
        ram_info['total_gb'] = memory.total / 1e9
        ram_info['available_gb'] = memory.available / 1e9
        ram_info['used_gb'] = memory.used / 1e9
        ram_info['usage_percent'] = memory.percent
        ram_info['is_high_ram'] = ram_info['total_gb'] >= 20
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if ram_info['usage_percent'] > 80:
            ram_info['recommendation'] = '‚ö†Ô∏è  –í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è RAM - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ runtime'
        elif ram_info['total_gb'] < 8:
            ram_info['recommendation'] = '‚ö†Ô∏è  –ú–∞–ª–æ RAM - –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'
        else:
            ram_info['recommendation'] = '‚úÖ RAM —É –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ'
        
    except Exception as e:
        ram_info['recommendation'] = f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ RAM: {str(e)}'
    
    return ram_info

# =============================================================================
# –í–ò–ö–û–ù–ê–ù–ù–Ø –ü–ï–†–ï–í–Ü–†–û–ö
# =============================================================================

print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–°–¢–ï–ú–ù–ò–• –†–ï–°–£–†–°–Ü–í –í COLAB")
print("=" * 50)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GPU
print("\nüìä –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û GPU:")
gpu_status = check_gpu_availability()

if gpu_status['available']:
    print("‚úÖ GPU –¥–æ—Å—Ç—É–ø–Ω–∏–π")
    print(f"   –î—Ä–∞–π–≤–µ—Ä: {gpu_status['driver_version']}")
    print(f"   CUDA: {gpu_status['cuda_version']}")
    if gpu_status['memory_total'] > 0:
        memory_usage = (gpu_status['memory_used'] / gpu_status['memory_total']) * 100
        print(f"   –ü–∞–º'—è—Ç—å: {gpu_status['memory_used']} MiB / {gpu_status['memory_total']} MiB ({memory_usage:.1f}%)")
        print(f"   –í—ñ–ª—å–Ω–∞ –ø–∞–º'—è—Ç—å: {gpu_status['memory_free']} MiB")
    if gpu_status['temperature'] > 0:
        print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {gpu_status['temperature']}¬∞C")
    if gpu_status['utilization'] > 0:
        print(f"   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {gpu_status['utilization']}%")
else:
    print("‚ùå GPU –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    if gpu_status['error_message']:
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {gpu_status['error_message']}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ RAM
print("\nüíæ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û RAM:")
ram_status = check_ram_availability()

print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –ø–∞–º'—è—Ç—å: {ram_status['total_gb']:.1f} GB")
print(f"   –î–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–º'—è—Ç—å: {ram_status['available_gb']:.1f} GB")
print(f"   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –ø–∞–º'—è—Ç—å: {ram_status['used_gb']:.1f} GB")
print(f"   –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {ram_status['usage_percent']:.1f}%")

if ram_status['is_high_ram']:
    print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è runtime –∑ –≤–∏—Å–æ–∫–æ—é RAM")
else:
    print("‚ö†Ô∏è  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è runtime –∑ –Ω–∏–∑—å–∫–æ—é RAM (< 20 GB)")

print(f"   {ram_status['recommendation']}")

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è Colab
def check_colab_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞—Ü—é—î–º–æ –≤ Google Colab"""
    try:
        import google.colab
        return True
    except ImportError:
        return False

if check_colab_environment():
    print("üåê –ü—Ä–∞—Ü—é—î–º–æ –≤ Google Colab")
    print("üí° –î–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è:")
    print("   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ GPU runtime")
    print("   - –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤–∏—Å–æ–∫—ñ —Ä–µ—Å—É—Ä—Å–∏ RAM")
else:
    print("\n‚ùå –°–µ—Ä–µ–¥–æ–≤–∏—â–µ Google Colab –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ï–†–ï–í–Ü–†–ö–ò –°–ï–†–ï–î–û–í–ò–©–ê –í–ò–ö–û–ù–ê–ù–ù–Ø:")
if gpu_status['available'] and ram_status['is_high_ram']:
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –≥–ª–∏–±–æ–∫–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω–∏—Ö –º–µ—Ä–µ–∂")
elif gpu_status['available'] and not ram_status['is_high_ram']:
    print("‚ö†Ô∏è  GPU –¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–ª–µ –º–∞–ª–æ RAM - –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
elif not gpu_status['available'] and ram_status['is_high_ram']:
    print("‚ö†Ô∏è  –ë–∞–≥–∞—Ç–æ RAM, –∞–ª–µ –Ω–µ–º–∞—î GPU - –Ω–∞–≤—á–∞–Ω–Ω—è –±—É–¥–µ –ø–æ–≤—ñ–ª—å–Ω–∏–º")
else:
    print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Å—É—Ä—Å—ñ–≤ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è")

print("\n" + "=" * 50) 